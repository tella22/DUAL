1.  Escribir un bloque PL/SQL que escriba el texto ‘Hola’

  SET SERVEROUTPUT ON

  begin
     DBMS_OUTPUT.PUT_LINE('hola') ;
  end;

2.  Escribir un procedimiento que reciba dos números y visualice su suma.

  SET SERVEROUTPUT ON;

  declare
    v_read_1 NUMBER;
    v_read_2 NUMBER;
  begin
     v_read_1 := &ENTRADA_DATO_1;
     v_read_2 := &ENTRADA_DATO_2;
     DBMS_OUTPUT.PUT_LINE(v_read_1 + v_read_2);
  end;

3.  Codificar un procedimiento que reciba una cadena y la visualice al revés.
  
  SET SERVEROUTPUT ON;

  declare
    v_string VARCHAR(25);
    v_string_reverse VARCHAR(25);
  begin
      v_string := '&ENTRADA_DATO_1';
      select reverse(v_string) into v_string_reverse from dual;
      DBMS_OUTPUT.PUT_LINE('tu cadena al revés es ' || v_string_reverse);
  end;

4.  Escribir una función que reciba una fecha y devuelva el año, en número, correspondiente a esa fecha.

  SET SERVEROUTPUT ON;

  create or replace function fechas (v_fecha date) return number
  is
        anyo INTEGER;
  begin
        anyo := extract(year from v_fecha);
        return anyo;
  end;

5.  Escribir un bloque PL/SQL que haga uso de la función anterior.

  declare
    anyo integer;
  begin
    anyo := fechas(to_date('0218','mm/yy'));
    DBMS_OUTPUT.PUT_LINE(anyo);
  end;

6.  Dado el siguiente procedimiento:
  CREATE OR REPLACE PROCEDURE crear_depart (
      p_num_dept depart.dept_no%TYPE,
      p_dnombre depart.dnombre%TYPE DEFAULT 'PROVISIONAL',
      p_loc depart.loc%TYPE DEFAULT 'PROVISIONAL')
  IS
  BEGIN
      INSERT INTO depart
      VALUES (p_num_dept, p_dnombre, p_loc);
  END crear_depart;

Indicar cuáles de las siguientes llamadas son correctas y cuáles incorrectas, en este último caso escribir la llamada correcta usando la notación posicional (en los casos que se pueda):

1º. crear_depart;                              | incorrecta
2º. crear_depart(50);                          | correcta
3º. crear_depart('COMPRAS');                   | incorrecta
4º. crear_depart(50,'COMPRAS');                | correcto
5º. crear_depart('COMPRAS', 50);               | incorrecto
6º. crear_depart('COMPRAS', 'VALENCIA');       | incorrecto
7º. crear_depart(50, 'COMPRAS', 'VALENCIA');   | correcto
8º. crear_depart('COMPRAS', 50, 'VALENCIA');   | incorrecto
9º. crear_depart('VALENCIA', ‘COMPRAS’);       | incorrecto
10º. crear_depart('VALENCIA', 50);             | incorrecto

7.  Desarrollar una función que devuelva el número de años completos que hay entre dos fechas que se pasan como argumentos.

create or replace function dif_fechas (
    v_fecha_1 date, 
    v_fecha_2 date) return number
is
    v_fechas number(8,2);
    v_fecha_trunc integer;
begin
    v_fechas :=((v_fecha_1 - v_fecha_2)/365);
    v_fecha_trunc := ((v_fecha_1 - v_fecha_2)/365);
    return v_fechas;
end dif_fechas;

declare
    fechas number(4,2);
    meses integer;
    fechas_trunc integer;
  begin
    fechas := dif_fechas(sysdate, to_date('29/08/1997','dd/mm/yyyy'));
    fechas_trunc := floor(dif_fechas(sysdate, to_date('29/08/1997','dd/mm/yyyy')));
    meses := floor(((fechas-fechas_trunc)*(fechas_trunc*12)/fechas_trunc));    
    DBMS_OUTPUT.PUT_LINE(fechas || ' años');
    DBMS_OUTPUT.PUT_LINE(fechas_trunc || ' años y ' || meses || ' meses');
end;
8.  Escribir una función que, haciendo uso de la función anterior devuelva los trienios que hay entre dos fechas. (Un trienio son tres años completos).

create or replace function dif_fechas_trienios (p_fecha_1 date, p_fecha_2 date) return number
is
    v_fecha_dif number;
begin
    v_fecha_dif := trunc(dif_fechas(p_fecha_1, p_fecha_2) / 3);
    return v_fecha_dif;
end dif_fechas_trienios;

declare
    trienios integer;
  begin
    trienios := dif_fechas_trienios(sysdate, to_date('29/08/1997','dd/mm/yyyy'));
    DBMS_OUTPUT.PUT_LINE(trienios || ' trienios');
end;

9.  Codificar un procedimiento que reciba una lista de hasta 5 números y visualice su suma.

create or replace function suma_lista (
          num_1 number default 0, 
          num_2 number default 0, 
          num_3 number default 0, 
          num_4 number default 0, 
          num_5 number default 0) return number
is
    total integer;
begin
    total := num_1 + num_2 + num_3 + num_4 + num_5;
    return total;
end suma_lista;

declare
    total integer;
  begin
    total := suma_lista(2,2,3,4);
    DBMS_OUTPUT.PUT_LINE(total);
end;

10. Escribir una función que devuelva solamente caracteres alfabéticos sustituyendo cualquier otro carácter por blancos a partir de una cadena que se pasará en la llamada.

CREATE OR REPLACE
  FUNCTION espacios(
      cadena STRING)
    RETURN STRING
  IS
    str_clean STRING(20);
    actual_char STRING(2);
  BEGIN
    FOR indice IN 1..LENGTH(cadena)
    LOOP
      actual_char := SUBSTR(cadena, indice, 1);
      IF NOT (ascii(actual_char) >= 65 AND ascii(actual_char) <= 90 OR ascii(actual_char) >= 97 AND ascii(actual_char) <= 122) THEN
        actual_char := ' ';
      END IF;
      str_clean := str_clean || actual_char;
    END LOOP;
    RETURN str_clean;
END;

11. Implementar un procedimiento que reciba un importe y visualice el desglose del cambio en unidades monetarias de 1 cent., 2 cents., 5 cents., 10 cents., 20 cents., 50 cents., 1€, 2€, 5€, 10€, 20€, 50€ en orden inverso al que aparecen aquí enumeradas.

CREATE OR REPLACE
PROCEDURE dinero_calc_proc(
      total float)
IS
  v_50eu number default 0;
  v_20eu number default 0;
  v_10eu number default 0;
  v_5eu number default 0;
  v_2eu number default 0;
  v_1eu number default 0;
  v_50cent number default 0;
  v_20cent number default 0;
  v_10cent number default 0;
  v_5cent number default 0;
  v_2cent number default 0;
  v_1cent number default 0;
  v_total_bueno float;
  v_total float;
BEGIN
  v_total := total;
  v_total_bueno := total;
  WHILE total > 0
  LOOP
   CASE
    when v_total >= 50 then
    v_50eu := v_50eu + 1;
    v_total := v_total - 50;
    when v_total >= 20 and  v_total < 50 then
    v_20eu := v_20eu + 1;
    v_total := v_total - 20;
    when v_total >= 10 and v_total < 20 then
    v_10eu := v_10eu + 1;
    v_total := v_total - 10;
    when v_total >= 5 and v_total < 10 then
    v_5eu := v_5eu + 1;
    v_total := v_total - 5;
    when v_total >= 2 and v_total < 5 then
    v_2eu := v_2eu + 1;
    v_total := v_total - 2;
    when v_total >= 1 and v_total < 2 then
    v_1eu := v_1eu + 1;
    v_total := v_total - 1;
    when v_total >= 0.50 and v_total < 1 then
    v_50cent := v_50cent + 1;
    v_total := v_total - 0.50;
    when v_total >= 0.20 and v_total < 0.50 then
    v_20cent := v_20cent + 1;
    v_total := v_total - 0.20;
    when v_total >= 0.10 and v_total < 0.20 then
    v_10cent := v_10cent + 1;
    v_total := v_total - 0.10;
    when v_total >= 0.05 and v_total < 0.10 then
    v_5cent := v_5cent + 1;
    v_total := v_total - 0.05;
    when v_total >= 0.02 and v_total < 0.05 then
    v_2cent := v_2cent + 1;
    v_total := v_total - 0.02;
    when v_total >= 0.01 and v_total < 0.02 then
    v_1cent := v_1cent + 1;
    v_total := v_total - 0.01;
    else
      dbms_output.put_line('no ha funcionado sorry xd');
      exit;
    end case;  
  END LOOP;
    dbms_output.put_line('De tus ' || v_total_bueno || '€, te devuelvo ' || v_50eu || 'x 50EUR, ' || v_20eu  || 'x 20EUR, ' || v_10eu || 'x 10EUR, ' || v_5eu || 'x 5EUR, ' || v_2eu || 'x 2EUR, ' || v_1eu || 'x 1EUR, ' || v_50cent || 'x 50cent, ' || v_20cent || 'x 20cent, ' || v_10cent || 'x 10cent, ' || v_5cent || 'x 5cent, ' || v_2cent || 'x 2cent, ' || v_1cent || 'x 1cent' ); 
END;

begin
  dinero_calc_proc(100.26);
end;

12. Codificar un procedimiento que permita borrar un empleado cuyo número se pasará en la llamada.



13. Escribir un procedimiento que modifique la localidad de un departamento. El procedimiento recibirá como parámetros el número del departamento y la localidad nueva.
14. Visualizar todos los procedimientos y funciones del usuario almacenados en la base de datos y su situación (valid o invalid).