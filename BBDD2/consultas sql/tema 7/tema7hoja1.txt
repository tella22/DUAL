1)	Mostrar los nombres de todos nuestros proveedores.
1.
select nombre from proveedores;

2)	Mostrar el nombre y el precio de cada uno de nuestros productos.
2.
select nombre, precio_venta from productos;

3)	¿De qué provincias son nuestros clientes? (Que no se repitan las provincias en el resultado de la consulta).
3.
select unique provincia from clientes;

4)	Mostrar toda la información de nuestros empleados.
4.
select * from empleados;

5)	Muestra las ciudades de nuestros proveedores en orden alfabético junto con los nombres de los proveedores con los que trabajamos en cada ciudad.
5.
(select nombre, ciudad from proveedores)order by nombre;

6)	Haz un listado de la página web de cada uno de nuestros proveedores con el siguiente formato (no hay que mostrar los datos en caso de que no tengan página web).
http://www.shinoman.com/ es la pag web de Shinoman, Incorporated
6.
select pag_web ||' es la pagina web de ' || nombre as " " from proveedores where pag_web is not null;

7)	¿Cuántos días cuesta el envío de cada pedido?
7.
select numero_pedido, (fecha_envio - fecha_pedido) from pedidos;

8)	¿Cuál es el valor de inventario de cada producto? (El valor de inventario – aunque realmente no se hace así - lo consideraremos como el precio de venta de cada producto por el stock que hay en la tienda).
8.
select nombre, precio_venta,stock,(precio_venta*stock) as "Valor de inventario" from productos;

9)	Mostrar el precio de cada producto reducido en un 5%.
9.
select nombre, precio_venta,(0.95*precio_venta) as "Precio Reducido" from productos;

10)	Mostrar la lista de los pedidos que han hecho nuestros clientes en orden descendente de fecha. Hay que ver los pedidos de cada cliente seguidos.
10.
(select * from pedidos)order by ID_cliente,fecha_pedido desc;

11)	Mostrar la lista de los nombres y direcciones de nuestros proveedores ordenados alfabéticamente por el nombre del proveedor.
11.
(select nombre, direccion from proveedores) order by nombre;

12)	Mostrar el nombre y apellido de los clientes cuyo apellido sea Sanz.
12.
select nombre, apellidos from clientes where upper(apellidos) = 'SANZ';

13)	¿Cuáles son los nombres de los clientes que viven en la provincia de MADRID?
13.
select nombre from clientes where upper(provincia) = 'MADRID';

14)	Mostrar el nombre y apellido de los clientes que (una consulta para cada punto):
•	viven en la provincia de MADRID 
•	viven en Belmonte
•	tienen como código postal 45915
•	que hicieron pedidos en Mayo

14.
select nombre, apellidos from clientes where upper(provincia) = 'MADRID';
select nombre, apellidos from clientes where upper(ciudad) = 'BELMONTE';
select nombre, apellidos from clientes where cod_postal = 45915;
select nombre, apellidos from clientes where id_cliente in (select id_cliente from pedidos where to_char(fecha_pedido) like '___05%');

15)	¿Hay pedidos en los que la fecha de envío fue puesta accidentalmente anterior a la fecha de pedido?
15.
select numero_pedido from pedidos where fecha_pedido > fecha_envio;
no hay ninguno

16)	Mostrar el nombre y apellidos de los clientes cuyos apellidos empiezan por 'Pe'.
16.
select nombre, apellidos from clientes where upper(apellidos) like 'PE%';

17)	Mostrar el nombre y dirección de los proveedores cuya dirección incluya la cadena 'del'.
17.
select nombre, direccion from proveedores where direccion like '%del%';

18)	Listar el nombre y apellidos de los clientes que viven en Somosierra y cuyo apellido empieza con la letra ‘S’.
18.
select nombre, apellidos from clientes where upper(ciudad) = 'SOMOSIERRA' and upper(apellidos) like 'S%';

19)	Listar el nombre y apellidos de los clientes que viven en Somosierra o en la provincia de ORENSE.
19.
select nombre, apellidos from clientes where upper(ciudad) = 'SOMOSIERRA' or upper(provincia) = 'ORENSE';

20)	Mostrar una lista de los nombres y número de teléfono de los proveedores de las provincias de MADRID y CACERES.
20.
select nombre, telefono from proveedores where upper(provincia) = 'MADRID' or upper(provincia) = 'CACERES';

21)	Mostrar los datos de los pedidos del cliente 1001 en los que las fechas de pedido y envío coincidan.
21.
select * from pedidos where id_cliente = 1001 and fecha_pedido = fecha_envio;

22)	Mostrar los datos de los pedidos del cliente 1001 o que cumplan que la fecha de envío es 4 días posterior a la fecha de pedido.
22.
(select * from pedidos where id_cliente=1001 or (fecha_pedido = fecha_envio-4))order by id_cliente;

23)	Mostrar nombre, apellidos, provincia y código postal de los clientes que se apelliden Pelayo en la provincia de CACERES o de los clientes cuyo código postal termine en 9.
23.
select nombre, apellidos, provincia, cod_postal from clientes where (upper(apellidos) = 'PELAYO' and upper(provincia)='CACERES')or
cod_postal like '%9' ;

24)	Mostrar nombre, apellidos, provincia y código postal de los clientes que se apelliden Pelayo y de cualquier otro cliente que viva en la provincia de CACERES o tenga un código postal que termine en 9.
24.
select nombre, apellidos, provincia, cod_postal from clientes where (upper(apellidos) = 'PELAYO' or upper(provincia)='CACERES')or
cod_postal like '%9' ;

25)	Mostrar los datos de los proveedores que tienen su sede en CACERES, ORENSE o MADRID.
25.
select * from proveedores where upper(provincia)='CACERES' or upper(provincia)='MADRID' or upper(provincia)='ORENSE';

26)	Listar los clientes cuyo apellido empieza por H.c
26.
select * from clientes where upper(apellidos) like 'H%';

27)	Listar los clientes que no viven en Robledo ni en Somosierra.
27.
select * from clientes where upper(ciudad) != 'ROBLEDO' and upper(ciudad) != 'SOMOSIERRA';

28)	Mostrar el número de pedido, el id_cliente y la fecha de pedido de todos los pedidos que ha realizado el cliente 1001 ordenado por fecha de pedido.
28.
(select numero_pedido, id_cliente, fecha_pedido from pedidos where id_cliente=1001) order by fecha_pedido;

29)	Mostrar un listado en orden alfabético de los nombres de productos que empiezan por 'Dog'.
29.
select * from productos where upper(nombre) like 'DOG%';

30)	Listar los nombres de todos los proveedores con sede en Batres, Belmonte o Robledo.
30.
select nombre from proveedores where upper(ciudad)='BATRES' or upper(ciudad)='BELMONTE' or upper(ciudad)='ROBLEDO';

31)	Mostrar en orden alfabético la lista de los nombres de productos cuyo precio de venta sea igual o superior a 125.00 euros.
31.
(select nombre from productos where precio_venta >= 125.00)order by nombre;

32)	Listar en orden alfabético los nombres de los proveedores que no tienen página web.
32.
select * from proveedores where pag_web is null order by nombre;

33)	Intersección: Listar los número de pedidos en los que se han pedido tanto bicicletas  (sabiendo que sus números de producto son 1, 2, 6 y 11) como cascos (sabiendo que sus números de producto son 10, 25 y 26).
33.
Consulta multitabla
select distinct pedidos.numero_pedido 
from pedidos inner join detalles_pedidos on 
pedidos.numero_pedido = detalles_pedidos.numero_pedido 
where detalles_pedidos.numero_producto in (1,2,6,11) intersect
select distinct pedidos.numero_pedido 
from pedidos inner join detalles_pedidos on 
pedidos.numero_pedido = detalles_pedidos.numero_pedido
where detalles_pedidos.numero_producto in (10,25,26);

Subconsulta
select distinct pedidos.numero_pedido 
from pedidos inner join detalles_pedidos on 
pedidos.numero_pedido = detalles_pedidos.numero_pedido 
where detalles_pedidos.numero_producto in (1,2,6,11) and pedidos.numero_pedido in (
select  pedidos.numero_pedido 
from pedidos inner join detalles_pedidos on 
pedidos.numero_pedido = detalles_pedidos.numero_pedido
where detalles_pedidos.numero_producto in (10,25,26));

34)	Diferencia: Listar los número de pedidos que han comprado alguna bicicleta (sabiendo que sus números de producto son 1, 2, 6 y 11)  pero no cascos (sabiendo que sus números de producto son 10, 25 y 26). 
34.
Consulta multitabla
select distinct pedidos.numero_pedido 
from pedidos inner join detalles_pedidos on 
pedidos.numero_pedido = detalles_pedidos.numero_pedido
where detalles_pedidos.numero_producto in (1,2,6,11) and pedidos.numero_pedido not in
(select distinct pedidos.numero_pedido 
from pedidos inner join detalles_pedidos on 
pedidos.numero_pedido = detalles_pedidos.numero_pedido
where detalles_pedidos.numero_producto in (10,25,26));

subconsulta
select distinct pedidos.numero_pedido 
from pedidos inner join detalles_pedidos on 
pedidos.numero_pedido = detalles_pedidos.numero_pedido 
where detalles_pedidos.numero_producto in (1,2,6,11) and pedidos.numero_pedido not in (
select  pedidos.numero_pedido 
from pedidos inner join detalles_pedidos on 
pedidos.numero_pedido = detalles_pedidos.numero_pedido
where detalles_pedidos.numero_producto in (10,25,26));

35)	Unión: Listar los número de pedidos que han comprado alguna bicicleta (sabiendo que sus números de producto son 1, 2, 6 y 11)  o algún casco (sabiendo que sus números de producto son 10, 25 y 26). 
35.
subconsulta
select distinct pedidos.numero_pedido 
from pedidos inner join detalles_pedidos on 
pedidos.numero_pedido = detalles_pedidos.numero_pedido 
where detalles_pedidos.numero_producto in (1,2,6,11) or detalles_pedidos.numero_producto in (10,25,26);

36)	Clientes y empleados que tienen el mismo nombre.
36.
select empleados.nombre, empleados.apellidos, clientes.nombre, clientes.apellidos from empleados, clientes where empleados.nombre in clientes.nombre

37)	Clientes cuyos nombres no coinciden con los de ningún empleado.
37.
select clientes.nombre, clientes.apellidos from empleados, clientes where empleados.nombre not in clientes.nombre

38)	Ciudades en las que viven clientes pero ningún empleado.
38.
select unique clientes.ciudad from empleados, clientes where clientes.ciudad not in empleados.ciudad;