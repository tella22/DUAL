39. Listar todos los números de pedidos en los que se ha vendido algún producto cuyo número de producto es mayor que el número del producto con nombre 'Shinoman 105 SC Frenos'. No deben repetirse números de pedido.
39.
select distinct numero_pedido 
                      from detalles_pedidos 
                      where numero_producto > (select numero_producto
                                               from productos
                                               where nombre = 'Shinoman 105 SC Frenos');


40. Selecciona todos los nombres de proveedores que llevan productos que empiezan por la letra C y se enviaron en pedidos antes del 1 de Marzo del 2008.
40.
select distinct proveedores.nombre 
from proveedores inner join productos_proveedores on productos_proveedores.id_prov = proveedores.id_prov 
inner join productos on productos_proveedores.numero_producto = productos.numero_producto
where productos.nombre like 'C%' and productos.numero_producto in (select detalles_pedidos.numero_producto
from detalles_pedidos
where numero_pedido in (select numero_pedido from pedidos where fecha_envio <  to_date('01/03/08', 'dd/mm/yy') and fecha_envio is not null));

41.Selecciona todos los nombres de proveedores que llevan productos que empiezan por la letra V y no se han vendido.
41.
Select distinct proveedores.nombre 
from proveedores 
join productos_proveedores on proveedores.id_prov = productos_proveedores.id_prov 
join productos on productos.numero_producto = productos_proveedores.numero_producto
where productos.nombre like 'V%' and productos.numero_producto not in (select numero_producto from detalles_pedidos);

42. Intersección: Listar los clientes que han comprado tanto productos que contengan la cadena 'Bike' en el nombre como productos que contengan la cadena 'Casco' en el nombre.
42.
select nombre from clientes where id_cliente in (select id_cliente from clientes where id_cliente in
(select id_cliente from pedidos where numero_pedido in (select numero_pedido from detalles_pedidos where numero_producto in 
(select numero_producto from productos where nombre like '%Bike%')))
intersect
select id_cliente from clientes where id_cliente in
(select id_cliente from pedidos where numero_pedido in (select numero_pedido from detalles_pedidos where numero_producto in 
(select numero_producto from productos where nombre like '%Casco%'))));


43. Diferencia: Listar los clientes que han comprado algún producto que contenga la cadena 'Bike' en el nombre pero ningún producto que contenga la cadena 'Casco' en el nombre.
43.
select nombre 
from clientes 
where id_cliente in (
select id_cliente 
	from clientes 
	where id_cliente in(
	select id_cliente 
		from pedidos 
		where numero_pedido in (
		select numero_pedido 
			from detalles_pedidos 
			where numero_producto in (
			select numero_producto 
				from productos 
				where nombre like '%Bike%')))
minus
				select id_cliente 
					from clientes 
					where id_cliente in
(select id_cliente from pedidos where numero_pedido in (select numero_pedido from detalles_pedidos where numero_producto in 
(select numero_producto from productos where nombre like '%Casco%'))));

44. Unión: Listar los clientes que han comprado algún producto que contenga la cadena 'Bike' o la cadena 'Casco' en el nombre.
44.
select nombre from clientes where id_cliente in (select id_cliente from clientes where id_cliente in
(select id_cliente from pedidos where numero_pedido in (select numero_pedido from detalles_pedidos where numero_producto in 
(select numero_producto from productos where nombre like '%Bike%')))
union
select id_cliente from clientes where id_cliente in
(select id_cliente from pedidos where numero_pedido in (select numero_pedido from detalles_pedidos where numero_producto in 
(select numero_producto from productos where nombre like '%Casco%'))));

45. Clientes que viven en una ciudad que no coincide con ninguna de los empleados.
45.
select id_cliente from clientes where ciudad not in (select ciudad from empleados);

46. Lista de los clientes que han comprado algún producto que contenga la cadena 'Bike' en el nombre seguida de la lista de los que han comprado algún producto que contenga la cadena 'Casco' en el nombre (cruce de tablas).
46.
select nombre from clientes where id_cliente in ((select id_cliente from clientes where id_cliente in
(select id_cliente from pedidos where numero_pedido in (select numero_pedido from detalles_pedidos where numero_producto in 
(select numero_producto from productos where nombre like '%Bike%')))) 
union
select id_cliente from clientes where id_cliente in
(select id_cliente from pedidos where numero_pedido in (select numero_pedido from detalles_pedidos where numero_producto in 
(select numero_producto from productos where nombre like '%Casco%'))));

47. Seleccionar los nombres de los productos que pertenecen a la categoría 'Componentes'.
47.
select nombre 
from productos 
where id_categoria = (select id_categoria 
from categorias
where descripcion = 'Componentes');

48. Selecciona los productos cuyo precio sea mayor o igual que el de todos los demás.
48.
select * 
from productos 
where precio_venta >= all (
select precio_venta 
from productos);

49. Selecciona los productos cuyo precio sea menor que el producto 'Eagle SA-120 Pedales sin clip', ordenados por el precio de venta.
49.
select * 
from productos 
where precio_venta < (
select precio_venta 
from productos 
where nombre = 'Eagle SA-120 Pedales sin clip') 
order by precio_venta;

50. Modifica la descripción de la categoría 5 a 'Baca para el coche' y luego selecciona todos los productos que no pertenecen a las categorías 'Ruedas' ni 'Baca para el coche'.
50.
select * 
from productos 
where id_categoria not in (
select id_categoria 
from categorias 
where descripcion 
in ('Ruedas','Baca para el coche')); 

51. Seleccionar los productos cuyo precio de venta sea mayor que cualquier producto de la categoría 'Componentes'.
51.
select * 
from productos 
where precio_venta > any (
	select precio_venta 
	from productos 
	where id_categoria = (
 		select id_categoria 
    	from categorias 
    	where descripcion = 'Componentes'));

52. Selecciona los clientes que son de la misma ciudad que el cliente con id 1001, en la lista no tiene que salir el cliente 1001.
52.
select * from clientes 
where id_cliente != '1001' 
and ciudad = (select ciudad 
from clientes where id_cliente='1001');


53. Encuentra los productos que tienen el precio de venta mínimo de su categoría.
53.
select * from productos where precio_venta in (select min(precio_venta) from productos group by id_categoria);

54. Selecciona las categorías que no tienen productos.
54.
select * from categorias where id_categoria not in (select id_categoria from productos);