84)	Calcula el precio total de los pedidos de nuestros clientes.
84.
select sum(precio_total) from pedidos;

85)	Comprueba si la precisión de los campos numéricos de las tablas PEDIDOS, PEDIDOS_HISTORICO, DETALLES_ PEDIDOS y DETALLES_ PEDIDOS_HISTORICO coincide. Si no es así modifícalas para que haya coincidencia.
85.
//Comprobar cuales no estan correctos
select numero_pedido 
from pedidos 
where (precio_total,numero_pedido) 
not in (select sum(precio*cantidad), numero_pedido from detalles_pedidos group by numero_pedido);

//Comprobar precio de los que no esten correctos
select numero_pedido, precio_total 
from pedidos 
where numero_pedido in 
(select numero_pedido 
from pedidos 
where (precio_total,numero_pedido) not in 
(select sum(precio*cantidad), numero_pedido from detalles_pedidos group by numero_pedido));

//Tienen precio 0, borramos esas filas
delete
from pedidos 
where (precio_total,numero_pedido) not in 
(select sum(precio*cantidad), numero_pedido from detalles_pedidos group by numero_pedido);l

86)	Nuestra empresa es líder del mercado y puede permitirse hacer lo que le apetezca. Por eso ha decidido que aplicará con efecto retroactivo las últimas subidas de precio. 
86.
insert into pedidos_historico (NUMERO_PEDIDO,FECHA_PEDIDO,
FECHA_ENVIO ,ID_CLIENTE ,ID_EMPLEADO ,PRECIO_TOTAL  ,DESCUENTO)
 (select * from pedidos);

 insert into detalles_pedidos_historico (NUMERO_PEDIDO, NUMERO_PRODUCTO ,PRECIO   ,CANTIDAD)
 (select * from detalles_pedidos);

87)	Incrementa el precio de venta de todos los productos en un 10%. El departamento de ventas quiere deshacer los cambios lo antes posible.
87.
Consulta
select precio_venta, (precio_venta*1.10), numero_producto from productos;
Actualizacion
update productos set precio_venta = precio_venta*1.10;

88)	Tenemos que subir un 4% los precios de los productos de la categoría 'Ropa' y deshacer los cambios lo más tarde posible.
a)	Mostrar un listado con los nombres de los productos, el precio actual y el precio que tendrán después de la subida.
b)	Actualizar los precios de venta de dichos productos subiéndolos un 4%.

88.
//Comprobar
select precio_venta, (Precio_venta*1.04), id_categoria from productos where id_categoria = (
select id_categoria from categorias where upper(descripcion)='ROPA');

//update
update productos set precio_venta=precio_venta*1.04 where id_categoria = (
select id_categoria from categorias where upper(descripcion)='ROPA');

89)	Incrementar un 5% los precios de los productos de la categoría 'Ropa', a continuación actualiza los precios en DETALLES_PEDIDOS para que se correspondan con los que hay en la tabla productos y por último actualiza en la tabla PEDIDOS el precio total de cada pedido de acuerdo a los nuevos precios de los productos. Confirmarlo lo más tarde posible. 
89.
update productos set precio_venta=precio_venta*1.05
where id_categoria = (select id_categoria 
                      from categorias 
                      where descripcion 
                      like 'Ropa');

update detalles_pedidos
set precio = (select precio_venta 
                from productos 
                where detalles_pedidos.numero_producto =productos.numero_producto);

90)	 A partir de la tabla pedidos crea la tabla SALDOS_PENDIENTES con los mismos campos que la tabla pedidos y en el campo PRECIO_TOTAL el valor de la diferencia entre el PRECIO_TOTAL actualizado y el PRECIO_TOTAL antes de la actualización (éste último se encuentra en la tabla PEDIDOS_HISTORICO).
90.
//temporal
update pedidos set (precio_total,numero_pedido)=
   (select sum(precio*cantidad)as valores, numero_pedido 
    from detalles_pedidos group by numero_pedido 
    order by numero_pedido)

    --fin
    update pedidos set(precio_total)=
   (select sum(precio*cantidad)as valores
    from detalles_pedidos where pedidos.numero_pedido = detalles_pedidos.numero_pedido);

91)	 Ejecuta la sentencia rollback. ¿Qué pasa? ¿Por qué?
91.
rollback;
todo ha vuelto a como estaba porque no hemos hecho un commit.

92)	 Mostrar el nombre del proveedor y el promedio por proveedor del número de días que se tarda en realizar el envío de los productos. Hay que mostrar aquellos cuyo promedio sea mayor que el promedio de todos los proveedores.
92.
select nombre, avg(dias_envio)
from proveedores natural join productos_proveedores
group by nombre
having (avg(dias_envio)> (select avg(dias_envio) from productos_proveedores));

93)	Hacer una consulta que muestre el nombre del producto y  el total vendido de aquellos productos que superan el promedio de ventas de su categoría.
93.

select sum(dp.precio*dp.cantidad),p.nombre , dp.numero_producto
from detalles_pedidos dp 
join productos p on p.numero_producto = dp.numero_producto
group by dp.numero_producto,p.nombre 
having sum(dp.precio*dp.cantidad) > 
    (select avg(dp2.precio*dp2.cantidad) 
    from detalles_pedidos dp2 join productos p2 
    on p2.numero_producto = dp2.numero_producto
    where dp.numero_producto = dp2.numero_producto
    group by p2.id_categoria);

94)	Listar por cada cliente y fecha de pedido el nombre completo y el coste total del pedido si éste supera los 1000 euros. El coste del pedido hay que calcularlo a partir de la tabla DETALLES_PEDIDOS.
94.

select cl.id_cliente, cl.nombre, cl.apellidos, p.numero_pedido, sum(cantidad*precio), p.fecha_pedido
from clientes cl join pedidos p on cl.id_cliente = p.id_cliente
join detalles_pedidos dp on dp.numero_pedido = p.numero_pedido
group by cl.nombre, cl.apellidos, p.numero_pedido, p.fecha_pedido, cl.id_cliente
having sum(cantidad*precio) > 1000
order by cl.id_cliente, p.fecha_pedido;

95)	¿Cuántos pedidos hay de un sólo producto?
95.
select numero_pedido
from detalles_pedidos
group by numero_pedido
having count(*)=1;

select numero_pedido
from detalles_pedidos
group by numero_pedido
having max(cantidad)=1;